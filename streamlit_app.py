import streamlit as st
import pandas as pd
import openai


    # Configuration de la page
st.set_page_config(
    page_title="Analyse des Comptes Rendus - Parkours",
    page_icon="üöÄ",
    layout="wide"
)

# Utiliser un lien direct vers l'image h√©berg√©e
logo_url= "https://image.noelshack.com/fichiers/2025/09/3/1740586406-logo-parkours.png"
st.markdown(
    f"""
    <div style="display: flex; justify-content: center;">
        <img src="{logo_url}" width="120">
    </div>
    """,
    unsafe_allow_html=True
)

# Bloc de texte explicatif (mode "tuto")
st.markdown("""
    <h1 style='text-align: center; font-size: 60px; color: #06668c;'>RelectIA</h1>
    <h2 style='text-align: center; font-size: 30px; color: #333;'>L'application qui t'aide √† relire les comptes rendus trimestriels</h2>
    <br>

    <p style='font-size: 18px; text-align: justify;'>
    Cette application vous permet de :
    </p>

    <ul style='font-size: 18px;'>
        <li><b>Charger</b> un fichier CSV contenant vos comptes rendus trimestriels.</li>
        <li><b>Analyser</b> automatiquement les comptes rendus gr√¢ce √† l'intelligence artificielle pour obtenir des suggestions d'am√©lioration.</li>
    </ul>
    <br>

    <p style='font-size: 22px; color: #06668c;'>Comment utiliser l'application :</p>
    <ol style='font-size: 18px;'>
        <li>T√©l√©chargez votre fichier au format CSV.</li>
        <li>V√©rifiez avec l'aper√ßu que c'est le bon fichier.</li>
        <li>Visualisez les r√©sultats et t√©l√©chargez le fichier mis √† jour.</li>
        <li>Demandez √† Raph la cl√© de l'API.</li>
    </ol>
    <br>

    <p style='font-size: 16px; color: red;'><b>Note :</b> Votre fichier CSV doit contenir une colonne nomm√©e <code>compte_rendu</code> pour que l'analyse fonctionne correctement.</p>
""", unsafe_allow_html=True)

# Demander la cl√© API OpenAI √† l'utilisateur
# openai_api_key = "la cl√© la cl√©" (jamais faire √ßa ok ?)
# openai.api_key = openai_api_key

# Demander la cl√© API OpenAI √† l'utilisateur
openai_api_key = st.text_input("Cl√© API OpenAI", type="password")
if not openai_api_key:
    st.info("Veuillez entrer votre cl√© API OpenAI pour continuer.", icon="üîë")
else:
    # Cr√©er un client OpenAI
    openai.api_key = openai_api_key

# Charger le fichier CSV
uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV contenant les comptes rendus", type=["csv"])

if uploaded_file is not None:
    try:
        df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
        df = None

    if df is not None:
        st.success("Fichier charg√© avec succ√®s ! üéâ")
        st.write("### Aper√ßu des donn√©es :")
        st.dataframe(df)

        # Section pour poser une question sur le contenu du CSV
        #st.header("Poser une question sur le fichier CSV charg√©")
        #csv_question = st.text_area("Posez une question concernant les donn√©es du fichier CSV :", disabled=uploaded_file is None)
        #if csv_question:
        #    try:
        #        document = df.to_csv(index=False)
        #        messages = [
        #            {
        #                "role": "user",
        #                "content": f"Voici un document CSV :\n{document}\n\n---\n\n{csv_question}",
        #            }
        #        ]

        #        stream = openai.ChatCompletion.create(
        #            model="gpt-4-turbo",
        #            messages=messages,
        #            stream=True,
        #        )

        #        response_content = ""
        #        for chunk in stream:
        #            if hasattr(chunk.choices[0].delta, 'content') and chunk.choices[0].delta.content is not None:
        #                response_content += chunk.choices[0].delta.content
        #        st.write(response_content)

        #    except Exception as e:
        #        st.error(f"Erreur lors de l'appel √† l'API : {e}")

        # Bouton pour analyser les comptes rendus avec l'IA
        if st.button("Analyser les comptes rendus avec l'IA"):
            st.write("Analyse en cours...")

            suggestions = []
            corrections = []

            if 'compte_rendu' not in df.columns:
                st.error("La colonne 'compte_rendu' est absente du fichier CSV. Assurez-vous que le fichier est correctement format√©.")
            else:
                for index, row in df.iterrows():
                    compte_rendu = row['compte_rendu']

                     # 1. G√©n√©ration de la suggestion
                    prompt_suggestion = f"""
                    
Crit√®res de suggestion pour l'√©valuation des compte-rendus :

Corrections de Fautes :
Orthographe/Conjugaison : Identifier et corriger les fautes d'orthographe et de conjugaison sp√©cifiques.
Phrases mal Formul√©es : Corriger les phrases grammaticalement incorrectes ou mal formul√©es pour am√©liorer la clart√© (ex. "ce qui lui pose de plus de difficult√©s" devrait √™tre "ce qui lui pose le plus de difficult√©s").

Langage Appropri√© :
Inappropri√© ou Grossier : Remplacer tout langage inappropri√© ou grossier par des termes plus respectueux (ex. remplacer "idiot" par "distrait").

Contenu des Compte-Rendus :
Progression Acad√©mique : Mentionner uniquement la progression acad√©mique lorsque les am√©liorations des notes ou de la moyenne sont explicitement √©voqu√©es.
Longueur du Texte : Signaler si le texte est en-dessous de 80 mots ou au-dessus de 140 mots.
Termes Acad√©miques Sp√©cifiques : Identifier l'utilisation des termes "√©tude", "√©tudes", "semestre" et dire s‚Äôils sont utilis√©s dans le compte rendu.
Chaque suggestion sera formul√©e de mani√®re claire et concise, en √©vitant les r√©p√©titions inutiles, et en fournissant des explications lorsque des termes acad√©miques sp√©cifiques sont utilis√©s de mani√®re inappropri√©e. Les retours seront uniformis√©s et organis√©s de mani√®re √† faciliter la lecture et la compr√©hension.

{compte_rendu}
"""

                    try:
                        # Pr√©parer le message pour l'API
                        messages = [
                        {"role": "user", "content": prompt_suggestion}
                        ]

                        # Envoyer le prompt √† l'API OpenAI
                        response = openai.chat.completions.create(
                        model="gpt-4-turbo",
                        messages=messages
                        )

                        # Extraire la r√©ponse du contenu
                        suggestion = response.choices[0].message.content.strip()

                        # Ajouter la suggestion √† la liste des suggestions
                        suggestions.append(suggestion)

                    except Exception as e:
                        st.error(f"Erreur lors de l'appel √† l'API pour l'entr√©e {index + 1} : {e}")
                        suggestions.append("Erreur lors de l'analyse")

                        # 2. G√©n√©ration de la correction compl√®te en se basant sur la suggestion
                    prompt_correction = f"""
Proposez une r√©√©criture/une am√©lioration, du compte rendu en respectant les crit√®res de la suggestion.

Suggestion :
{suggestion}

Compte rendu original :
{compte_rendu}
"""

                    try:
                        # Pr√©parer le message pour l'API
                        messages_corr = [
                        {"role": "user", "content": prompt_correction}
                        ]

                        # Envoyer le prompt √† l'API OpenAI
                        response_corr = openai.chat.completions.create(
                        model="gpt-4-turbo",
                        messages=messages_corr
                        )

                        # Extraire la r√©ponse du contenu
                        correction = response_corr.choices[0].message.content.strip()

                        # Ajouter la suggestion √† la liste des suggestions
                        corrections.append(correction)

                    except Exception as e:
                        st.error(f"Erreur lors de l'appel √† l'API pour l'entr√©e {index + 1} : {e}")
                        corrections.append("Erreur lors de l'analyse")


            # V√©rifier si le nombre de suggestions correspond au nombre de lignes dans le dataframe
            if len(suggestions) != len(df) or len(corrections) != len(df):
                st.error(f"Nombre de suggestions ({len(suggestions)}) ou nombre de corrections ({len(corrections)}) ne correspond pas au nombre de lignes ({len(df)}) dans le fichier.")
            else:
                df['Suggestions'] = suggestions
                df['Corrections'] = corrections

            # Afficher le dataframe avec les deux colonnes
            st.write("Comptes rendus avec suggestions et corrections :")
            st.dataframe(df)

            # Option de t√©l√©chargement du fichier mis √† jour
            csv = df.to_csv(index=False)
            st.download_button(label="T√©l√©charger les suggestions et corrections", data=csv, file_name='comptes_rendus_avec_suggestions_et_corrections.csv', mime='text/csv')
