import streamlit as st
import pandas as pd
import openai


    # Configuration de la page
st.set_page_config(
    page_title="Analyse des Comptes Rendus - Parkours",
    page_icon="üöÄ",
    layout="wide"
)

# Utiliser un lien direct vers l'image h√©berg√©e
logo_url= "https://image.noelshack.com/fichiers/2025/09/3/1740586406-logo-parkours.png"
st.markdown(
    f"""
    <div style="display: flex; justify-content: center;">
        <img src="{logo_url}" width="120">
    </div>
    """,
    unsafe_allow_html=True
)

# Bloc de texte explicatif (mode "tuto")
st.markdown("""
    <h1 style='text-align: center; font-size: 60px; color: #06668c;'>RelectIA</h1>
    <h2 style='text-align: center; font-size: 30px; color: #333;'>L'application qui t'aide √† relire les comptes rendus trimestriels</h2>
    <br>

    <p style='font-size: 18px; text-align: justify;'>
    Cette application vous permet de :
    </p>

    <ul style='font-size: 18px;'>
        <li><b>Charger</b> un fichier CSV contenant vos comptes rendus trimestriels.</li>
        <li><b>Analyser</b> automatiquement les comptes rendus gr√¢ce √† l'intelligence artificielle pour obtenir des suggestions d'am√©lioration.</li>
        <li><b>Interroger</b> le contenu du CSV pour poser des questions sp√©cifiques.</li>
    </ul>
    <br>

    <p style='font-size: 22px; color: #06668c;'>Comment utiliser l'application :</p>
    <ol style='font-size: 18px;'>
        <li>T√©l√©chargez votre fichier au format CSV.</li>
        <li>V√©rifier avec l'aper√ßu que c'est le bon fichier.</li>
        <li>Visualisez les r√©sultats et t√©l√©chargez le fichier mis √† jour.</li>
    </ol>
    <br>

    <p style='font-size: 16px; color: red;'><b>Note :</b> Votre fichier CSV doit contenir une colonne nomm√©e <code>compte_rendu</code> pour que l'analyse fonctionne correctement.</p>
""", unsafe_allow_html=True)

# Demander la cl√© API OpenAI √† l'utilisateur
openai_api_key = "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"
openai.api_key = openai_api_key

# D√©finir directement la cl√© API OpenAI
#openai.api_key = "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"  # Remplacez par votre cl√© API

# Charger le fichier CSV
uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV contenant les comptes rendus", type=["csv"])

if uploaded_file is not None:
    try:
        df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
        df = None

    if df is not None:
        st.success("Fichier charg√© avec succ√®s ! üéâ")
        st.write("### Aper√ßu des donn√©es :")
        st.dataframe(df)

        # Section pour poser une question sur le contenu du CSV
        #st.header("Poser une question sur le fichier CSV charg√©")
        #csv_question = st.text_area("Posez une question concernant les donn√©es du fichier CSV :", disabled=uploaded_file is None)
        #if csv_question:
        #    try:
        #        document = df.to_csv(index=False)
        #        messages = [
        #            {
        #                "role": "user",
        #                "content": f"Voici un document CSV :\n{document}\n\n---\n\n{csv_question}",
        #            }
        #        ]

        #        stream = openai.ChatCompletion.create(
        #            model="gpt-3.5-turbo",
        #            messages=messages,
        #            stream=True,
        #        )

        #        response_content = ""
        #        for chunk in stream:
        #            if hasattr(chunk.choices[0].delta, 'content') and chunk.choices[0].delta.content is not None:
        #                response_content += chunk.choices[0].delta.content
        #        st.write(response_content)

        #    except Exception as e:
        #        st.error(f"Erreur lors de l'appel √† l'API : {e}")

        # Bouton pour analyser les comptes rendus avec l'IA
        if st.button("Analyser les comptes rendus avec l'IA"):
            st.write("Analyse en cours...")

            suggestions = []

            if 'compte_rendu' not in df.columns:
                st.error("La colonne 'compte_rendu' est absente du fichier CSV. Assurez-vous que le fichier est correctement format√©.")
            else:
                for index, row in df.iterrows():
                    compte_rendu = row['compte_rendu']

                    prompt = f"""
Le mot "√©tude" doit √™tre remplac√© par "tutorat" et le mot "Parkours" est bien √©crit de cette mani√®re car c'est le nom de notre marque (ni Parkour's, ni parcours, etc.).

Un bon compte rendu doit √™tre clair, structur√© et r√©dig√© dans un registre soutenu. Voici les principales caract√©ristiques √† prendre en compte pour la r√©daction :

1. **Langue** : Le compte rendu doit √™tre r√©dig√© √† la deuxi√®me personne du singulier. Utilise un langage respectueux et soutenu, en √©vitant les termes familiers ou vagues. Il est important d'√™tre pr√©cis tout en restant motivant.

2. **Style** : Chaque compte rendu doit commencer par une observation positive concernant les efforts ou les qualit√©s de l'√©l√®ve. Il est n√©cessaire d'identifier les progr√®s faits au cours de la p√©riode concern√©e, tout en soulignant les points sur lesquels l'√©l√®ve peut encore s'am√©liorer. Ces points d'am√©lioration doivent √™tre formul√©s de mani√®re constructive, en proposant des pistes pour progresser.

3. **Syntaxe** : Les phrases doivent √™tre bien structur√©es, d√©butant par une majuscule et se terminant par une ponctuation ad√©quate. Le style doit √™tre fluide, avec des transitions claires entre les diff√©rentes id√©es, afin de maintenir la coh√©rence du compte rendu.

4. **Motivation** : Termine par une phrase motivante pour encourager l'√©l√®ve √† poursuivre ses efforts et √† maintenir la r√©gularit√© dans son engagement au tutorat.

5. **Sp√©cificit√©** : Chaque commentaire doit √™tre sp√©cifique, mentionnant des aspects concrets du travail ou du comportement de l'√©l√®ve, par exemple : "Tu as fait preuve d'une bonne attitude face aux difficult√©s en posant r√©guli√®rement des questions pertinentes." Il est pr√©f√©rable d'utiliser des exemples concrets plut√¥t que des termes g√©n√©raux.

{compte_rendu}
"""

                    try:
                        # Pr√©parer le message pour l'API
                        messages = [
                        {"role": "user", "content": prompt}
                        ]

                        # Envoyer le prompt √† l'API OpenAI
                        response = openai.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=messages
                        )

                        # Extraire la r√©ponse du contenu
                        response_content = response.choices[0].message.content.strip()

                        # Ajouter la suggestion √† la liste des suggestions
                        suggestions.append(response_content)

                    except Exception as e:
                        st.error(f"Erreur lors de l'appel √† l'API pour l'entr√©e {index + 1} : {e}")
                        suggestions.append("Erreur lors de l'analyse")


            # V√©rifier si le nombre de suggestions correspond au nombre de lignes dans le dataframe
            if len(suggestions) != len(df):
                st.error(f"Nombre de suggestions ({len(suggestions)}) ne correspond pas au nombre de lignes ({len(df)}) dans le fichier.")
            else:
                df['Suggestions'] = suggestions

            # Afficher les r√©sultats avec les suggestions
            st.write("Comptes rendus avec suggestions :")
            st.dataframe(df)

            # Ajouter une option pour t√©l√©charger le fichier mis √† jour
            csv = df.to_csv(index=False)
            st.download_button(label="T√©l√©charger les suggestions", data=csv, file_name='comptes_rendus_avec_suggestions.csv', mime='text/csv')
