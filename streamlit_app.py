import streamlit as st
import pandas as pd
import openai

# Demander la cl√© API OpenAI √† l'utilisateur
openai_api_key = st.text_input("Cl√© API OpenAI", type="password")
if not openai_api_key:
    st.info("Veuillez entrer votre cl√© API OpenAI pour continuer.", icon="üîë")
else:
    # Cr√©er un client OpenAI
    openai.api_key = openai_api_key

    # Titre de l'application
    st.title("üìÑ Relecture et Questions sur les Comptes Rendus Trimestriels")

    # Charger le fichier CSV
    uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV contenant les comptes rendus", type=["csv"])

    if uploaded_file is not None:
        # Lire le fichier avec pandas
        try:
            df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
            df = None

        # Afficher un message de succ√®s
        st.success("Fichier charg√© avec succ√®s ! üéâ")

        # Afficher un aper√ßu des donn√©es
        st.write("Aper√ßu des donn√©es :")
        st.dataframe(df)

        # Poser une question sur le contenu du CSV
        st.header("Poser une question sur le fichier CSV charg√©")
        csv_question = st.text_area("Posez une question concernant les donn√©es du fichier CSV :", disabled=uploaded_file is None)
        if uploaded_file and csv_question:
            try:
                        # Pr√©parer le message pour l'API
                document = df.to_csv(index=False)
                messages = [
                    {
                        "role": "user",
                        "content": f"Voici un document CSV :\n{document}\n\n---\n\n{csv_question}",
                    }
                ]

                # Envoyer le prompt √† l'API OpenAI
                stream = openai.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    stream=True,
                )

                # Afficher la r√©ponse en continu
                response_content = ""
                for chunk in stream:
                    if hasattr(chunk.choices[0].delta, 'content') and chunk.choices[0].message.content is not None:
                        response_content += chunk.choices[0].delta.content
                
                # Afficher la r√©ponse compl√®te une fois que toute la r√©ponse est accumul√©e
                st.write(response_content)


            except Exception as e:
                st.error(f"Erreur lors de l'appel √† l'API : {e}")

        # Analyser les comptes rendus
        if st.button("Analyser les comptes rendus avec l'IA"):
            st.write("Analyse en cours...")

            # Ajouter une colonne pour les suggestions IA
            suggestions = []

            if 'compte_rendu' not in df.columns:
                st.error("La colonne 'compte_rendu' est absente du fichier CSV. Assurez-vous que le fichier est correctement format√©.")
            else:
                for index, row in df.iterrows():
                    compte_rendu = row['compte_rendu']  # Assurez-vous que la colonne s'appelle bien "compte_rendu"
                    
                    #Cr√©er le prompt pour l'IA
                    prompt = f"Le mot √©tude doit √™tre remplac√© par tutorat et le mot Parkours est bien √©crit de cette mani√®re car c'est le nom de notre marque (ni Parkour's, ni parcours, etc).\n Un bon compte rendu doit √™tre clair, structur√© et r√©dig√© dans un registre soutenu. Voici les principales caract√©ristiques √† prendre en compte pour la r√©daction :\n Langue : Le compte rendu doit √™tre r√©dig√© √† la deuxi√®me personne du singulier. Utiliser un langage respectueux et soutenu, en √©vitant les termes familiers ou vagues. Il est important d'√™tre pr√©cis tout en restant motivant.\n Style : Chaque compte rendu doit commencer par une observation positive concernant les efforts ou les qualit√©s de l'√©l√®ve. Il est n√©cessaire d'identifier les progr√®s faits au cours de la p√©riode concern√©e, tout en soulignant les points sur lesquels l'√©l√®ve peut encore s'am√©liorer. Ces points d'am√©lioration doivent √™tre formul√©s de mani√®re constructive, en proposant des pistes pour progresser.\n Syntaxe : Les phrases doivent √™tre bien structur√©es, d√©butant par une majuscule et se terminant par une ponctuation ad√©quate. Le style doit √™tre fluide, avec des transitions claires entre les diff√©rentes id√©es, afin de maintenir la coh√©rence du compte rendu.\n Motivation : Terminer par une phrase motivante pour encourager l'√©l√®ve √† poursuivre ses efforts et √† maintenir la r√©gularit√© dans son engagement au tutorat.\n Sp√©cificit√© : Chaque commentaire doit √™tre sp√©cifique, mentionnant des aspects concrets du travail ou du comportement de l'√©l√®ve, par exemple : 'Tu as fait preuve d'une bonne attitude face aux difficult√©s en posant r√©guli√®rement des questions pertinentes.' Plut√¥t que des termes g√©n√©raux, utiliser des exemples qui montrent clairement les actions positives. \n Exemple Observation positive : 'Tu as su montrer un v√©ritable engagement dans ton travail personnel.' \n Am√©liorations sugg√©r√©es : 'Pour continuer √† progresser, tu devrais essayer de maintenir une concentration constante et de t‚Äô√©loigner des distractions.' \n Conclusion motivante : 'Continue sur cette voie, tes efforts porteront leurs fruits.':\n\n{compte_rendu}"

                    try:
                        # Pr√©parer le message pour l'API
                        messages = [
                        {"role": "user", "content": prompt}
                        ]

                        # Envoyer le prompt √† l'API OpenAI
                        response = openai.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=messages
                        )

                        # Extraire la r√©ponse du contenu
                        response_content = response.choices[0].message.content.strip()

                        # Ajouter la suggestion √† la liste des suggestions
                        suggestions.append(response_content)

                    except Exception as e:
                        st.error(f"Erreur lors de l'appel √† l'API pour l'entr√©e {index + 1} : {e}")
                        suggestions.append("Erreur lors de l'analyse")


            # V√©rifier si le nombre de suggestions correspond au nombre de lignes dans le dataframe
            if len(suggestions) != len(df):
                st.error(f"Nombre de suggestions ({len(suggestions)}) ne correspond pas au nombre de lignes ({len(df)}) dans le fichier.")
            else:
                df['Suggestions'] = suggestions

            # Afficher les r√©sultats avec les suggestions
            st.write("Comptes rendus avec suggestions :")
            st.dataframe(df)

            # Ajouter une option pour t√©l√©charger le fichier mis √† jour
            csv = df.to_csv(index=False)
            st.download_button(label="T√©l√©charger les suggestions", data=csv, file_name='comptes_rendus_avec_suggestions.csv', mime='text/csv')
