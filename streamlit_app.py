import streamlit as st
import pandas as pd
import openai

# Demander la cl√© API OpenAI √† l'utilisateur
openai_api_key = st.text_input("Cl√© API OpenAI", type="password")
if not openai_api_key:
    st.info("Veuillez entrer votre cl√© API OpenAI pour continuer.", icon="üîë")
else:
    # Cr√©er un client OpenAI
    openai.api_key = openai_api_key

    # Titre de l'application
    st.title("üìÑ Relecture et Questions sur les Comptes Rendus Trimestriels")

    # Charger le fichier CSV
    uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV contenant les comptes rendus", type=["csv"])

    if uploaded_file is not None:
        # Lire le fichier avec pandas
        try:
            df = pd.read_csv(uploaded_file, sep=',', encoding='utf-8')
        except Exception as e:
            st.error(f"Erreur lors de la lecture du fichier CSV : {e}")
            df = None

        # Afficher un message de succ√®s
        st.success("Fichier charg√© avec succ√®s ! üéâ")

        # Afficher un aper√ßu des donn√©es
        st.write("Aper√ßu des donn√©es :")
        st.dataframe(df)

        # Poser une question sur le contenu du CSV
        st.header("Poser une question sur le fichier CSV charg√©")
        csv_question = st.text_area("Posez une question concernant les donn√©es du fichier CSV :", disabled=uploaded_file is None)
        if uploaded_file and csv_question:
            try:
                        # Pr√©parer le message pour l'API
                document = df.to_csv(index=False)
                messages = [
                    {
                        "role": "user",
                        "content": f"Voici un document CSV :\n{document}\n\n---\n\n{csv_question}",
                    }
                ]

                # Envoyer le prompt √† l'API OpenAI
                stream = openai.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    stream=True,
                )

                # Afficher la r√©ponse en continu
                response_content = ""
                for chunk in stream:
                    if hasattr(chunk.choices[0].delta, 'content') and chunk.choices[0].message.content is not None:
                        response_content += chunk.choices[0].delta.content
                
                # Afficher la r√©ponse compl√®te une fois que toute la r√©ponse est accumul√©e
                st.write(response_content)


            except Exception as e:
                st.error(f"Erreur lors de l'appel √† l'API : {e}")

        # Analyser les comptes rendus
        if st.button("Analyser les comptes rendus avec l'IA"):
            st.write("Analyse en cours...")

            # Ajouter une colonne pour les suggestions IA
            suggestions = []

            if 'compte_rendu' not in df.columns:
                st.error("La colonne 'compte_rendu' est absente du fichier CSV. Assurez-vous que le fichier est correctement format√©.")
            else:
                for index, row in df.iterrows():
                    compte_rendu = row['compte_rendu']  # Assurez-vous que la colonne s'appelle bien "compte_rendu"
                prompt = f"R√©√©crit le texte suivant ci-besoin afin d'am√©liorer l'orthographe, la clart√© et la pertinence. Il faudrait aussi que le mot √©tude soit toujours remplac√© par le mot tutorat. Voil√† l'exemple d'un bon compte rendu R√©√©crit le texte suivant ci-besoin afin d'am√©liorer l'orthographe, la clart√© et la pertinence. Il faudrait aussi que le mot √©tude soit toujours remplac√© par le mot tutorat. Voil√† l'exemple d'un bon compte rendu : Alexandre s‚Äôest rapidement appropri√© les sessions de tutorat pour en tirer le maximum ; il participe avec entrain aux diff√©rents temps de travail (rituels de mise au travail, tableau des devoirs, etc.). Durant ce trimestre, nous avons particuli√®rement insist√© sur les math√©matiques et plus sp√©cifiquement sur les chapitres de g√©om√©trie pour lesquels il rencontre davantage de difficult√©s. Nous avons √©galement utilement r√©alis√© un certain nombre de dict√©es, exercice pour lequel nous sommes en train de surmonter ses r√©ticences ! Globalement, le tutorat a l‚Äôair de profiter √† Alexandre, nous l‚Äôencourageons √† maintenir cet √©tat d‚Äôesprit positif !. Encore un autre exemple :C√©sar√©a a rejoint le tutorat en cours de trimestre. Depuis le d√©but de l‚Äôann√©e, nous avons relev√© des probl√®mes d‚Äôorganisation sur lesquels nous allons essayer de la faire progresser cette ann√©e : oubli de mat√©riel fr√©quent, devoirs not√©s imparfaitement, etc. Si C√©sar√©a est parfois agit√©e en d√©but d‚Äô√©tude, elle arrive dans la plupart des cas √† se recentrer sur ses devoirs et sollicite  le tuteur d√®s qu‚Äôelle en ressent le besoin. C‚Äôest une bonne chose ! Nous allons √©galement continuer d‚Äôaccorder une attention particuli√®re aux math√©matiques pour lesquelles elle rencontre davantage de difficult√©s. N'h√©sites pas √† faire des paragraphes si tu sens que c'est n√©cessaire. On peut √©galement v√©rifier que le pr√©nom est le bon et qu'il n'y a pas de copi√© coll√© entre chaque ligne de diff√©rents comptes rendus :\n\n{compte_rendu}"

                try:
                    # Pr√©parer le message pour l'API
                    messages = [
                        {"role": "user", "content": prompt}
                    ]

                    # Envoyer le prompt √† l'API OpenAI
                    response = openai.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=messages
                    )

                    # Extraire la r√©ponse du contenu
                    response_content = response.choices[0].message.content.strip()

                    # Ajouter la suggestion √† la liste des suggestions
                    suggestions.append(response_content)

                except Exception as e:
                    st.error(f"Erreur lors de l'appel √† l'API pour l'entr√©e {index + 1} : {e}")
                    suggestions.append("Erreur lors de l'analyse")

            # Ajouter les suggestions au dataframe
            while len(suggestions) < len(df):
                suggestions.append("Pas de suggestion disponible")
            if len(suggestions) < len(df):
                suggestions += ["Pas de suggestion disponible"] * (len(df) - len(suggestions))
            df['Suggestions'] = suggestions

            # Afficher les r√©sultats avec les suggestions
            st.write("Comptes rendus avec suggestions :")
            st.dataframe(df)

            # Ajouter une option pour t√©l√©charger le fichier mis √† jour
            csv = df.to_csv(index=False)
            st.download_button(label="T√©l√©charger les suggestions", data=csv, file_name='comptes_rendus_avec_suggestions.csv', mime='text/csv')

